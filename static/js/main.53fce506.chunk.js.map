{"version":3,"sources":["components/UserSection/UserSection.js","components/NavBar/NavBar.js","components/CategorySection/CategorySection.js","components/AccountSection/AccountSection.js","components/ExpensesSection/ExpensesSection.js","App.js","serviceWorker.js","index.js"],"names":["UserSection","className","src","alt","NavBar","CategorySection","categories","addCategory","console","log","map","category","style","backgroundColor","color","categoryTitle","type","AccountSection","ExpensesSection","App","React","useState","expenseID","expense","locationName","date","accountId","categoryId","setExpense","accountID","accountTitle","account","setAccount","categoryID","setCategory","expenses","addExpense","accounts","addAccount","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wTAYeA,G,kBATK,WAChB,OACI,6BAASC,UAAU,gBACf,yBAAKC,IAAI,sEAAsEC,IAAI,eACnF,8CCSGC,EAXA,WACX,OACI,6BACG,0CACA,iCACI,kBAAC,EAAD,SCaAC,G,MApBS,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,WAA6B,EAAjBC,YAGlC,OAFFC,QAAQC,IAAI,WAAYH,GAGpB,6BAASL,UAAU,oBACf,wCACA,yBAAKA,UAAU,iBACZK,EAAWI,KAAI,SAACC,GACf,OACE,6BAASC,MAAO,CAAEC,gBAAgB,GAAD,OAAIF,EAASG,QAAUb,UAAU,aAC9D,2BAAIU,EAASI,mBAIrB,4BAAQC,KAAK,UAAb,SCPGC,EARQ,WACnB,OACE,iCACI,wCCKKC,EARS,WACpB,OACE,iCACI,yCC6CKC,EA1CH,WAAO,IAAD,EACcC,IAAMC,SAAS,CAC3C,CAAEC,UAAW,EAAGC,QAAS,KAAOC,aAAc,cAAeC,KAAM,aAAcC,UAAW,KAAMC,WAAY,QAFhG,mBACTJ,EADS,KACAK,EADA,OAIcR,IAAMC,SAAS,CAC1C,CAAEQ,UAAW,GAAIC,aAAc,cAAehB,MAAO,UAAWE,KAAM,kBALzD,mBAITe,EAJS,KAIAC,EAJA,OAOgBZ,IAAMC,SAAS,CAC5C,CAAEY,WAAY,GAAIlB,cAAe,YAAaD,MAAO,aARxC,mBAOTH,EAPS,KAOCuB,EAPD,KA4BhB,OACE,6BAASjC,UAAU,OACjB,kBAAC,EAAD,MACA,6BAASA,UAAU,wBAChB,kBAAC,EAAD,CAAiBK,WAAYK,EAAUJ,YAR1B,SAACI,GACnBuB,EAAYvB,MAQP,kBAAC,EAAD,CAAiBwB,SAAUZ,EAASa,WAjBxB,SAACb,GAClBK,EAAWL,OAkBT,6BAAStB,UAAU,uBACjB,kBAAC,EAAD,CAAgBoC,SAAUN,EAASO,WAhBtB,SAACP,GAClBC,EAAWD,SCjBKQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.53fce506.chunk.js","sourcesContent":["import React from 'react';\nimport './UserSection.css';\n\nconst UserSection = () => {\n    return (\n        <section className='user-section'>\n            <img src='https://api.time.com/wp-content/uploads/2017/07/1f9dd-w-5-320px.png' alt='user image'/>\n            <p>Salome Lopez</p>\n        </section>\n    )\n};\n\nexport default UserSection;","import React from 'react';\nimport './NavBar.css';\n\nimport UserSection from './../UserSection/UserSection';\n\nconst NavBar = () => {\n    return (\n        <nav>\n           <h1>MB Tracker</h1>\n           <section>\n               <UserSection />\n           </section>\n        </nav>\n    )\n};\n\nexport default NavBar;\n\n","import React from 'react';\nimport './CategorySection.css';\n\nconst CategorySection = ({categories, addCategory}) => {\n  console.log('Category', categories)\n\n    return (\n      <section className='category_section'>\n          <h2>Category</h2>\n          <div className='category_list'>\n            {categories.map((category) => {\n              return (\n                <section style={{ backgroundColor:`${category.color}`}} className='category_'>\n                    <p>{category.categoryTitle}</p>\n                </section>\n              );\n            })}\n            <button type='button'>+</button>\n          </div>\n      </section>\n    )\n};\n\nexport default CategorySection;","import React from 'react';\n\nconst AccountSection = () => {\n    return (\n      <section>\n          <p>Account</p>\n      </section>\n    )\n};\n\nexport default AccountSection;","import React from 'react';\n\nconst ExpensesSection = () => {\n    return (\n      <section>\n          <p>Expenses</p>\n      </section>\n    )\n};\n\nexport default ExpensesSection;","import React from 'react';\nimport './App.css';\n\nimport NavBar from './components/NavBar/NavBar';\nimport CategorySection from './components/CategorySection/CategorySection';\nimport AccountSection from './components/AccountSection/AccountSection';\nimport ExpensesSection from './components/ExpensesSection/ExpensesSection';\n\nconst App = () => {\n  const [expense, setExpense] = React.useState([\n    { expenseID: 1, expense: 49.90, locationName: 'Whole Foods', date: '2020-15-03', accountId: '20', categoryId: '15'}\n  ]);\n  const [account, setAccount] = React.useState([\n     { accountID: 20, accountTitle: 'London Trip', color: '#9381FF', type: 'bank account' }\n  ]);\n  const [category, setCategory] = React.useState([\n     { categoryID: 15, categoryTitle: 'groceries', color: '#FFD8BE' }\n  ]);\n  const colorTypes = [\n    {type: 'bank account', color: '#9DC4B5'},\n    {type: 'card', color: '#9DC4B5'},\n    {type: 'credit', color: '#FAC9B8'}\n  ];\n\n  const addExpense = (expense) => {\n    setExpense(expense);\n  }\n\n  const addAccount = (account) => {\n    setAccount(account);\n  }\n\n  const addCategory = (category) => {\n    setCategory(category);\n  }\n\n  return (\n    <section className='App'>\n      <NavBar />\n      <section className='cat_expenses_section'>\n         <CategorySection categories={category} addCategory={addCategory} />\n         <ExpensesSection expenses={expense} addExpense={addExpense} />\n      </section>\n      <section className='app_account_section'>\n        <AccountSection accounts={account} addAccount={addAccount}/>\n      </section>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}